name: Kubernetes Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  k8s-scan:
    name: Run Kubernetes Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install kubeconform
      run: |
        # Install kubeconform
        curl -L -o kubeconform.tgz https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
        tar xzf kubeconform.tgz kubeconform
        sudo mv kubeconform /usr/local/bin/
        kubeconform -v
    
    - name: Validate Kubernetes manifests with kubeconform
      run: |
        # Find and validate all Kubernetes manifests
        find . -type f \( -name "*.yaml" -o -name "*.yml" \) \
          -not -path "./vendor/*" \
          -not -path "./kustomize/*" \
          -not -path "./tmp/*" \
          -not -path "./monitoring/grafana-dashboard.json" \
          -not -path "./node_modules/*" | \
        while read -r file; do
          echo "‚úÖ Validating $file"
          kubeconform -summary -ignore-missing-schemas "$file" || \
          (echo "‚ùå Validation failed for $file" && exit 1)
        done
    
    - name: Install kube-score
      run: |
        # Install kube-score
        curl -L -o kube-score https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
        chmod +x kube-score
        sudo mv kube-score /usr/local/bin/
    
    - name: Run kube-score analysis
      continue-on-error: true  # Don't fail the build on kube-score warnings
      run: |
        # Run kube-score on all Kubernetes manifests
        find . -type f \( -name "*.yaml" -o -name "*.yml" \) \
          -not -path "./vendor/*" \
          -not -path "./kustomize/*" \
          -not -path "./tmp/*" \
          -not -path "./monitoring/grafana-dashboard.json" \
          -not -path "./node_modules/*" | \
        while read -r file; do
          echo "üîç Analyzing $file"
          kube-score score "$file" \
            --ignore-test container-image-pull-policy \
            --ignore-test container-resources \
            --ignore-test container-security-context \
            --ignore-test pod-probes \
            --output-format ci || true
        done
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'nashon11/capstone-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true  # Don't fail the build on vulnerabilities
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
